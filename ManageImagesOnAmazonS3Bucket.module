<?php

/**
 * ProcessWire 'ManageImagesOnAmazonS3Bucket' Module
 *
 * Sync and Backup Images of page assets uploaded into PW to Amazon S3 and Deliver them via Amazon S3 Bucket
 *
 * ProcessWire 3.x
 * Copyright (C) 2014 by Mirza Dabeer Hussain
 * Licensed under GNU/GPL v2
 *
 * https://github.com/mirzadabeer/ManageImagesOnAmazonS3Bucket
 */

/* Load AWS SDK for PHP */
use Aws\S3\S3Client;

class ManageImagesOnAmazonS3Bucket extends WireData implements Module, ConfigurableModule
{
    /**
     * Method to provide module information
     *
     * @return array
     *
     * @author Mirza Dabeer Hussain <mirza.hussain@tajawal.com>
     *
     */
    public static function getModuleInfo()
    {
        return [
            'title'    => 'Manage Images to and fro Amazon S3 bucket',
            'version'  => 60,
            'summary'  => 'Synchronize all the page assets uploaded through PW to a specified bucket in Amazon S3 and serve them through Amazon S3 Bucket.',
            'href'     => 'https://github.com/mirzadabeer/ManageImagesOnAmazonS3Bucket',
            'singular' => true,
            'autoload' => true,
        ];
    }

    /** @var  S3Client $client */
    private $client;

    /**
     * Module initialization. Defining Hooks.
     *
     * @author Mirza Dabeer Hussain <mirza.hussain@tajawal.com>
     *
     */
    public function init()
    {
        $this->client = S3Client::factory([
            'credentials' => ['key'    => $this->s3_key,
                              'secret' => $this->s3_secret,],
            'region'      => 'eu-west-1',
            'version'     => '2006-03-01',
        ]);
    }

    /**********************************************************************************************
     * _getInputFieldInstance (from the FieldtypeCropImage module)
     *
     **********************************************************************************************/

    public function _getInputFieldInstance(HookEvent $event)
    {
        $field  = null; // where we'll keep the field we're looking for
        $image  = $event->object;
        $page   = $image->page;
        $action = $event->arguments[0];

        // find all fields of type FieldtypeImage that are part of the page we're using
        // or regular image fields with InputfieldImage inputfield assigned
        $imageFields = [];
        foreach ($page->fields as $f) {
            if ($f->type instanceof FieldtypeCropImage || ($f->inputfieldClass && $f->inputfieldClass == 'InputfieldCropImage')) {
                $imageFields[] = $f;
            }
        }

        // loop through to find the one we're looking for
        foreach ($imageFields as $imageField) {

            // good to get unformatted in case it's a single image field,
            // because it'll still be an array rather than 1 image
            $pagefiles = $page->getUnformatted($imageField->name);


            // if the image's pagefiles property matches the one with the
            // field we're looking at, we have a match. save in $field
            if ($image->pagefiles === $pagefiles) {
                $field = $imageField->getInputfield($page);
                break;
            }
        }

        if ($field) {
            //$event->return = $out;
            return $field;
        }

        return null;
    }

    /**********************************************************************************************
     * Get Module Configuration
     *
     **********************************************************************************************/

    static public function getModuleConfigInputfields(array $data)
    {

        $form          = new InputfieldWrapper();
        $fs_aws        = wire('modules')->get("InputfieldFieldset");
        $fs_aws->label = 'AWS';
        $fs_aws->id    = 'fs_aws';

        $fs_cf        = wire('modules')->get("InputfieldFieldset");
        $fs_cf->label = 'CloudFront';
        $fs_cf->id    = 'fs_cf';

        $fs_s3        = wire('modules')->get("InputfieldFieldset");
        $fs_s3->label = 'S3';
        $fs_s3->id    = 'fs_s3';

        $form->add($fs_aws);
        $form->add($fs_s3);
        $form->add($fs_cf);

        $sel = wire('modules')->get('InputfieldSelect');
        $sel->attr('name', 'select_acl');
        $sel->label       = "ACL File Permissions for S3 Bucket files";
        $sel->description = 'This can be used to define the file permissions uploaded to S3. If you use Cloudfront to serve your assets files, use the default "public-read". More information [here](http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl).';
        $sel->addOptions(
            [
                'public-read'               => 'public-read',
                'public-read-write'         => 'public-read-write',
                'authenticated-read'        => 'authenticated-read',
                'bucket-owner-read'         => 'bucket-owner-read',
                'bucket-owner-full-control' => 'bucket-owner-full-control',
                'private'                   => 'private',
            ]
        );
        $sel->attr("value", "public-read");         // Default option
        $sel->attr('value', $data['select_acl']);

        $b              = wire('modules')->get('InputfieldText');
        $k              = wire('modules')->get('InputfieldText');
        $s              = wire('modules')->get('InputfieldText');
        $s->type        = 'password';                    // Masks access key in the module configuration
        $b->name        = 's3_bucket';
        $k->name        = 's3_key';
        $s->name        = 's3_secret';
        $b->label       = 'Amazon S3 Bucket name:';
        $b->description = 'A S3 Bucket must be created before using this module. Bucket names must be unique on S3. More information [here](http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html).';
        $k->label       = 'Access Key ID:';
        $s->label       = 'Secret Access Key:';
        $b->value       = $data['s3_bucket'];
        $k->value       = $data['s3_key'];
        $s->value       = $data['s3_secret'];

        $fs_aws->add($k);
        $fs_aws->add($s);

        $backup = wire('modules')->get('InputfieldCheckbox');
        $backup->attr('name', 'backupfiles');
        $backup->label       = 'Backup deleted files to a separate folder';
        $backup->description = 'If you want to keep a backup of all the asset files deleted, they will be moved to another folder inside S3 and defined below.';
        $backup->attr('autocheck', 1);
        $backup->attr('uncheckedValue', 0);
        $backup->attr('checkedValue', 1);
        $backup->attr('value', $data['backupfiles']);

        $bfolder              = wire('modules')->get('InputfieldText');
        $bfolder->name        = 's3_backupfolder';
        $bfolder->label       = 'Backup folder name on S3 Bucket:';
        $bfolder->description = 'Set up a name for the backup folder on S3. It will be created automatically if it doesn\'t exists.';
        $bfolder->attr("value", !empty($data['s3_backupfolder']) ? $data['s3_backupfolder'] : "_backup");

        $fs_s3->add($b);
        $fs_s3->add($sel);
        $fs_s3->add($backup);
        $fs_s3->add($bfolder);

        $cf = wire('modules')->get('InputfieldCheckbox');
        $cf->attr('name', 'cf');
        $cf->label       = 'Use CloudFront to serve the assets';
        $cf->description = 'Check if you want to serve the assets directly from Amazon CloudFront. Uncheck if you want to serve the asset files from the server where ProcessWire is installed.';
        $cf->attr('autocheck', 1);
        $cf->attr('uncheckedValue', 0);
        $cf->attr('checkedValue', 1);
        $cf->attr('value', $data['cf']);

        $cfurl              = wire('modules')->get('InputfieldText');
        $cfurl->name        = 'cfurl';
        $cfurl->label       = 'Domain name for the CloudFront distribution:';
        $cfurl->description = 'Set up a CloudFront distribution pointing to the S3 bucket above and deploy it. Use the domain name provided by Amazon or set up your own CNAME pointing to that domain.';
        $cfurl->value       = $data['cfurl'];

        $cache = wire('modules')->get('InputfieldText');
        $cache->attr('name', 'cache');
        $cache->label       = 'Set Cache-Control Directive for the files uploaded to S3';
        $cache->description = 'Fill this field with the a number of seconds, it will set an Cache-Control: max-age=seconds on the files to handle the browser and CloudFront cache. Read more about it [here](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html). Leaving the field blank doesn\'t add any directive to the files.';
        $cache->attr("value", empty($data['cache']) || is_int($data['cache']) ? $data['cache'] : "86400");
        $cache->notes = "Ex: 3600 = 1 hour; 86400 = 24 hours; 604800 = 7 days; 2592000 = 30 days;";

        $tstamp = wire('modules')->get('InputfieldCheckbox');
        $tstamp->attr('name', 'tstamp');
        $tstamp->label       = 'Rename uploaded files using a timestamp (versioning)';
        $tstamp->description = 'This option adds a timestamp to the uploaded files so they always have unique names.';
        $tstamp->attr('autocheck', 1);
        $tstamp->attr('uncheckedValue', 0);
        $tstamp->attr('checkedValue', 1);
        $tstamp->attr('value', $data['tstamp']);
        $tstamp->notes = "Once the files are cached by CloudFront, they will remain cached by the period specified above. This option will add versioning to all the files uploaded so you can easily replace files. The files will be renamed using a timestamp inserted in all the file names. Ex: yourfilename-v1403782033.jpg";

        $fs_cf->add($cf);
        $fs_cf->add($cfurl);
        $fs_cf->add($cache);
        $fs_cf->add($tstamp);

        return $form;
    }
}